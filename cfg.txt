START -> START START | ASSIGNMENT | FOR | IF | WHILE | FUNCTION | SPACE | BREAKCONTINUE | RETURN | SWITCH
OPTSTART -> START | e
BREAKCONTINUE -> break SEMICOLON | continue SEMICOLON
ASSIGNMENT -> VARLETCONST SPACE VAR = MATHEXP SEMICOLON | VAR ASSIGNOPS MATHEXP SEMICOLON | VARLETCONST SPACE VAR SEMICOLON | MATHEXP SEMICOLON
VARLETCONST -> var | let | const
FOR -> for ( VARLETCONST SPACE VAR = MATHEXP SEMICOLON MATHEXP SEMICOLON MATHEXP ) { OPTSTART }
RETURN -> return SPACE MATHEXP SEMICOLON | return SEMICOLON | e
ASSIGNOPS -> = | += | -= | *= | /= | **=
DELETE -> delete SPACE VAR SEMICOLON
FUNCTION -> function SPACE VAR ( PARAM ) { OPTSTART } | function SPACE VAR ( ) { OPTSTART } 
PARAM -> PARAM , PARAM | VAR | e
SWITCH -> switch ( VAR ) { CASEDEFAULT }
CASEDEFAULT -> CASEDEFAULT CASEDEFAULT | CASE | DEFAULT | 
WHILE -> while ( MATHEXP ) { OPTSTART }	
ELSE -> else { START } | else SPACE IF | e
IF -> if ( MATHEXP ) { START } ELSE
THROW -> throw SPACE VARMATHEXP SEMICOLON
TRY -> try { OPTSTART } CATCH FINALLY | try { OPTSTART } CATCH | try { OPTSTART } FINALLY 
FINALLY -> finally { OPTSTART }
CASE -> case SPACE VARMATHEXP : { OPTSTART }
CATCH -> catch ( VAR ) { OPTSTART } 
VAR -> variable
VARMATHEXP -> VAR | MATHEXP
MATHEXP -> BRACKET VAR BRACKET | BRACKET NUMBER BRACKET | MATHEXP OPERATORS MATHEXP | VAR + + | VAR - -
BRACKET -> BRACKET BRACKET | ( | ) | e
SEMICOLON -> ; 
SPACE -> SPACE SPACE | space | newline
OPERATORS -> + | * | * * | - | / | & & | & | or or | or
NUMBER -> number
DEFAULT -> default : { OPTSTART }