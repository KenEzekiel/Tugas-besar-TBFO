START -> START START | ASSIGNMENT | FOR | IF | WHILE | FUNCTION | SPACE | BREAKCONTINUE | RETURN | SWITCH
OPTSTART -> START | e
ARGUMENT -> ARGUMENT , ARGUMENT | . . . MATHEXP | MATHEXP | e
ARRAYVAR -> ARRAYVAR , ARRAYVAR | VAR | . . . VAR
ASSIGNMENT -> VARLETCONST SPACE VAR = MATHEXP SEMICOLON | VAR ASSIGNOPS MATHEXP SEMICOLON | VARLETCONST SPACE VAR SEMICOLON | MATHEXP SEMICOLON | VARLETCONST SPACE { PARAMREST } = MATHEXP SEMICOLON | { PARAMREST } = MATHEXP SEMICOLON | VARLETCONST SPACE [ ARRAYVAR ] = MATHEXP SEMICOLON | [ ARRAYVAR ] = MATHEXP SEMICOLON
ASSIGNOPS -> = | + = | - = | * = | / = | * * = | % = | & & = | & = | or or = | or = | ^ = | ? ? = | = < < | = > > | = > > >
BREAKCONTINUE -> break SEMICOLON | continue SEMICOLON
CASE -> case SPACE MATHEXP : { OPTSTART }
CASEDEFAULT -> CASEDEFAULT CASEDEFAULT | CASE | DEFAULT | e
CATCH -> catch ( variable ) { OPTSTART }
DEFAULT -> default : { OPTSTART }
DELETE -> delete SPACE MATHEXP SEMICOLON
ELSE -> else { START } | else SPACE IF | e
FINALLY -> finally { OPTSTART }
FOR -> for ( VARLETCONST SPACE VAR = MATHEXP SEMICOLON MATHEXP SEMICOLON MATHEXP ) { OPTSTART } | for ( VAR = MATHEXP SEMICOLON MATHEXP SEMICOLON MATHEXP ) { OPTSTART }
FUNCTION -> function SPACE variable ( PARAMREST ) { OPTSTART } | function SPACE variable ( ) { OPTSTART } braces
IF -> if ( MATHEXP ) { START } ELSE
MATHEXP -> ! MATHEXP | ( MATHEXP ) | VAR | NUMBER | MATHEXP OPERATORS MATHEXP | VAR + + | VAR - - | [ ARGUMENT ] | { OBJECT }
NUMBER -> number
OBJECT -> OBJECT , OBJECT | number : MATHEXP | variable : MATHEXP | variable
OPERATORS -> + | * | * * | - | / | % | & & | & | or or | or | ^ | = = | = = = | ! = = | ! = | < | > | < = | > = | ? ? | < < | > > | > > >
OPTSTART -> START | e
PARAM -> PARAM , PARAM | variable
PARAMREST -> PARAM | PARAM , . . . variable | e
RETURN -> return SPACE MATHEXP SEMICOLON | return SEMICOLON | e
SEMICOLON -> ;
SPACE -> SPACE SPACE | space | newline
SWITCH -> switch ( MATHEXP ) { CASEDEFAULT }
THROW -> throw SPACE MATHEXP SEMICOLON
TRY -> try { OPTSTART } CATCH FINALLY | try { OPTSTART } CATCH | try { OPTSTART } FINALLY
VAR -> variable | VAR ( ARGUMENT ) | VAR . VAR | ( VAR ) | VAR [ MATHEXP ]
VARLETCONST -> var | let | const
WHILE -> while ( MATHEXP ) { OPTSTART }